from tkinter import ttk,messagebox
import mysql.connector as m
from PIL import ImageTk,Image,ImageDraw,ImageFont

name="Doctor's Corner"
window=Tk()
window.title('HOSPITAL MANAGEMENT SYSTEM')
test=ImageTk.PhotoImage(Image.open("doctorsimage1.jpg").resize((1100,600)))
label=Label(image=test)
label.pack()

#exit function 
def exit(window):
        window.destroy()
        
#doc function
def doc():
        exit(window)
        window1=Tk()
        window1.geometry("500x530")
        window1.title('HOSPITAL MANAGEMENT SYSTEM')
        labelp=Label(window1,text='         ',font='algerian')
        labelp.place(x=4,y=5)
        label=Label(window1,text='WELCOME TO'+'\n'+name,font=('algerian',28))
        label.place(x=90,y=40)
        
        #create function        
        def create():
                label.destroy()
                labelp.destroy()
                but.destroy()
                but1.destroy()
                but2.destroy()
                label1=Label(window1,text='')
                label1.grid(row=0,column=0,columnspan=6,rowspan=2)
                label2=Label(window1,text='Fill up the following details',font=('Times',15))
                label2.grid(row=2,column=3,columnspan=6,rowspan=2)
                
                label3=Label(window1,text='Name of Doctor')
                label3.grid(row=4,column=0,columnspan=3)
                label4=Label(window1,text='Specialist Field')
                label4.grid(row=5,column=0,columnspan=3)
                label5=Label(window1,text='City')
                label5.grid(row=6,column=0,columnspan=3)
                label6=Label(window1,text='State')
                label6.grid(row=7,column=0,columnspan=3)
                label7=Label(window1,text='Qualification')
                label7.grid(row=8,column=0,columnspan=3)
                label8=Label(window1,text='Qualification Year')
                label8.grid(row=9,column=0,columnspan=3)
                label9=Label(window1,text='University Name')
                label9.grid(row=11,column=0,columnspan=3)
                label10=Label(window1,text='REG. Date')
                lab1=Label(window1,text='IN YYYY-MM-DD')
                lab1.grid(row=13,column=0)
                label10.grid(row=12,column=0,columnspan=3)
                label11=Label(window1,text='Email ID')
                label11.grid(row=14,column=0,columnspan=3)
                label12=Label(window1,text='Date of Birth')
                lab2=Label(window1,text='IN YYYY-MM-DD')
                lab2.grid(row=16,column=0)
                label12.grid(row=15,column=0,columnspan=3)
                label13=Label(window1,text='PH. Number')
                label13.grid(row=17,column=0,columnspan=3)
                label14=Label(window1,text='Mobile Number')
                label14.grid(row=18,column=0,columnspan=3)
                label15=Label(window1,text='Hospital details')
                label15.grid(row=19,column=0,columnspan=3,rowspan=2)
                label16=Label(window1,text='Residential Address')
                label16.grid(row=20,column=0,columnspan=3,rowspan=2)
                label17=Label(window1,text='Username')
                label17.grid(row=22,column=0,columnspan=3,rowspan=2)
                label18=Label(window1,text='Password')
                label18.grid(row=23,column=0,columnspan=3,rowspan=2)
                
                entry=Entry(window1,font = ('calibre',10,'normal'))
                entry.grid(row=4,column=3,columnspan=3,sticky=E)
                entry1=Entry(window1,font = ('calibre',10,'normal'))
                entry1.grid(row=5,column=3,columnspan=3,sticky=E)
                entry2=Entry(window1,font = ('calibre',10,'normal'))
                entry2.grid(row=6,column=3,columnspan=3,sticky=E)
                entry3=Entry(window1,font = ('calibre',10,'normal'))
                entry3.grid(row=7,column=3,columnspan=3,sticky=E)
                entry4=Entry(window1,font = ('calibre',10,'normal'))
                entry4.grid(row=8,column=3,columnspan=3,sticky=E)
                entry5=Entry(window1,font = ('calibre',10,'normal'))
                entry5.grid(row=9,column=3,columnspan=3,sticky=E)
                entry6=Entry(window1,font = ('calibre',10,'normal'))
                entry6.grid(row=11,column=3,columnspan=3,sticky=E)
                entry7=Entry(window1,font = ('calibre',10,'normal'))
                entry7.grid(row=12,column=3,columnspan=3,sticky=E)
                entry8=Entry(window1,font = ('calibre',10,'normal'))
                entry8.grid(row=14,column=3,columnspan=3,sticky=E)
                entry9=Entry(window1,font = ('calibre',10,'normal'))
                entry9.grid(row=15,column=3,columnspan=3,sticky=E)
                entry10=Entry(window1,font = ('calibre',10,'normal'))
                entry10.grid(row=17,column=3,columnspan=3,sticky=E)
                entry11=Entry(window1,font = ('calibre',10,'normal'))
                entry11.grid(row=18,column=3,columnspan=3,sticky=E)
                entry12=Entry(window1,font = ('calibre',10,'normal'))
                entry12.grid(row=19,column=3,columnspan=3,sticky=E,pady=4)
                entry13=Entry(window1,font = ('calibre',10,'normal'))
                entry13.grid(row=21,column=3,columnspan=3,sticky=E,pady=4)
                entry14=Entry(window1,font = ('calibre',10,'normal'))
                entry14.grid(row=22,column=3,columnspan=3,sticky=E,pady=4)
                entry15=Entry(window1,font = ('calibre',10,'normal'))
                entry15.grid(row=23,column=3,columnspan=3,sticky=E,pady=4)
                
                label19=Label(window1,text='             ')
                label19.grid(row=24,column=3)
                def add():
                        name=str(entry.get())
                        city=str(entry2.get())
                        state=str(entry3.get())
                        sfield=str(entry1.get())
                        qual=str(entry4.get())
                        qualy=int(entry5.get())
                        u_name=str(entry6.get())
                        regdate=str(entry7.get())
                        email=str(entry8.get())
                        dob=str(entry9.get())
                        phnum=int(entry10.get())
                        mobnum=int(entry11.get())
                        hopdetails=str(entry12.get())
                        resdetails=str(entry13.get())
                        user=str(entry14.get())
                        passw=str(entry15.get())
                        try:
                                conn= m.connect(host='localhost',user='root' , password='')
                                c=conn.cursor()
                                c.execute('create database if not exists Doctor_Management')
                                c.execute('use Doctor_Management')
                                c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                                c.execute('''insert into doctor values("%s","%s","%s","%s","%s","%d","%s","%s","%s","%s","%d","%d","%s","%s","%s","%s")'''%(name,city,state,sfield,qual,qualy,u_name,regdate,email,dob,phnum,mobnum,hopdetails,resdetails,user,passw))
                                conn.commit()
                                messagebox.showinfo('Insert Status','Record inserted successfully')
                                c.close()
                                entry.delete(0,END)
                                entry1.delete(0,END)
                                entry2.delete(0,END)
                                entry3.delete(0,END)
                                entry4.delete(0,END)
                                entry5.delete(0,END)
                                entry6.delete(0,END)
                                entry7.delete(0,END)
                                entry8.delete(0,END)
                                entry9.delete(0,END)
                                entry10.delete(0,END)
                                entry11.delete(0,END)
                                entry12.delete(0,END)
                                entry13.delete(0,END)
                                entry14.delete(0,END)
                                entry15.delete(0,END)
                        except m.Error as error:
                                messagebox.showerror('Insert Status','Record insertion failed'.format(error))
                        name.delete(0,END)
                        city.delete(0,END)
                        state.delete(0,END)
                        sfield.delete(0,END)
                        qual.delete(0,END)
                        qualy.delete(0,END)
                        u_name.delete(0,END)
                        regdate.delete(0,END)
                        email.delete(0,END)
                        dob.delete(0,END)
                        phnum.delete(0,END)
                        mobnum.delete(0,END)
                        hopdetails.delete(0,END)
                        resdetails.delete(0,END)
                        user.delete(0,END)
                        passw.delete(0,END)
                        
                Butt=Button(window1,text='Add Details',command=add)
                Butt.grid(row=25,column=3,pady=5)

        #update function
        def update():
                label.destroy()
                labelp.destroy()
                but.destroy()
                but1.destroy()
                but2.destroy()
                labels=Label(window1,text=' ')
                labels.grid(row=0,column=0,columnspan=6,rowspan=2)
                labelss=Label(window1,text='           Enter your name',font=('algerian',15))
                labelss.grid(row=2,column=1,columnspan=6,rowspan=2)

                entrys=Entry(window1,font = ('calibre',10,'normal'))
                entrys.grid(row=4,column=4,columnspan=3,sticky=E)

                def okay():
                        name=entrys.get()
                        conn=m.connect(host='localhost',user='root' , password='')
                        c=conn.cursor()
                        c.execute('create database if not exists Doctor_Management')
                        c.execute('use Doctor_Management')
                        c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                        c.execute('''select * from doctor where Doctor_Name="%s"'''%name)
                        d=c.fetchall()
                        if d==[]:
                            messagebox.showerror('Insert Status','Entered Name not found')
                        else:
                            buts.grid_forget()
                            labels.grid_forget()
                            labelss.grid_forget()
                            entrys.grid_forget()
                            label1=Label(window1,text='')
                            label1.grid(row=0,column=0,columnspan=6,rowspan=2)
                            label2=Label(window1,text='      Enter username/Passord',font=('algerian',15))
                            label2.grid(row=2,column=1,columnspan=6,rowspan=2)
                            label3=Label(window1,text='Username')
                            label3.grid(row=4,column=0,columnspan=6,rowspan=2)
                            label4=Label(window1,text='')
                            label4.grid(row=6,column=1,columnspan=6)
                            label5=Label(window1,text='Password')
                            label5.grid(row=7,column=0,columnspan=6,rowspan=2)
                            label6=Label(window1,text='')
                            label6.grid(row=8,column=1,columnspan=6,rowspan=2)

                            entry=Entry(window1,font = ('calibre',10,'normal'))
                            entry.grid(row=4,column=4,columnspan=3,sticky=E)
                            entry1=Entry(window1,font = ('calibre',10,'normal'), show = '*')
                            entry1.grid(row=7,column=4,columnspan=3,sticky=E)               
                            def next(d):
                                    for i in d:
                                            if entry.get()=='' or entry1.get()=='':
                                                    messagebox.showinfo('Insert Status','Enter Username/Password')
                                            elif  (entry.get()!=i[14] and entry1.get()==i[15]) or (entry.get()==i[14] and entry1.get()!=i[15]) or (entry.get()!=i[14] and entry1.get()!=i[15]):
                                                    entry.delete(0,END)
                                                    entry1.delete(0,END)
                                                    messagebox.showerror('Insert Status','Entered Username/Password is incorrect: Access Denied')

                                            elif entry.get()==i[14] and entry1.get()==i[15]:
                                                    label1.grid_forget()
                                                    label2.grid_forget()
                                                    label5.grid_forget()
                                                    label4.grid_forget()
                                                    label3.grid_forget()
                                                    label6.grid_forget()
                                                    entry.grid_forget()
                                                    entry1.grid_forget()
                                                    but3.grid_forget()

                                                    labela=Label(window1,text='')
                                                    labela.grid(row=0,column=0,columnspan=6,rowspan=2)
                                                    labelb=Label(window1,text='Update your details',font=('Times',15))
                                                    labelb.grid(row=2,column=3,columnspan=6,rowspan=2)
                                                    labelc=Label(window1,text='Name of Doctor')
                                                    labelc.grid(row=4,column=0,columnspan=3)
                                                    labeld=Label(window1,text='Specialist Field')
                                                    labeld.grid(row=5,column=0,columnspan=3)
                                                    labele=Label(window1,text='City')
                                                    labele.grid(row=6,column=0,columnspan=3)
                                                    labelf=Label(window1,text='State')
                                                    labelf.grid(row=7,column=0,columnspan=3)
                                                    label7=Label(window1,text='Qualification')
                                                    label7.grid(row=8,column=0,columnspan=3)
                                                    label8=Label(window1,text='Qualification Year')
                                                    label8.grid(row=9,column=0,columnspan=3)
                                                    label9=Label(window1,text='University Name')
                                                    label9.grid(row=11,column=0,columnspan=3)
                                                    label10=Label(window1,text='REG. Date')
                                                    lab1=Label(window1,text='IN YYYY-MM-DD')
                                                    lab1.grid(row=13,column=0)
                                                    label10.grid(row=12,column=0,columnspan=3)
                                                    label11=Label(window1,text='Email ID')
                                                    label11.grid(row=14,column=0,columnspan=3)
                                                    label12=Label(window1,text='Date of Birth')
                                                    lab2=Label(window1,text='IN YYYY-MM-DD')
                                                    lab2.grid(row=16,column=0)
                                                    label12.grid(row=15,column=0,columnspan=3)
                                                    label13=Label(window1,text='PH. Number')
                                                    label13.grid(row=17,column=0,columnspan=3)
                                                    label14=Label(window1,text='Mobile Number')
                                                    label14.grid(row=18,column=0,columnspan=3)
                                                    label15=Label(window1,text='Hospital details')
                                                    label15.grid(row=19,column=0,columnspan=3,rowspan=2)
                                                    label16=Label(window1,text='Residential Address')
                                                    label16.grid(row=20,column=0,columnspan=3,rowspan=2)
                                                    label117=Label(window1,text='Username')
                                                    label117.grid(row=22,column=0,columnspan=3)
                                                    label18=Label(window1,text='Password')
                                                    label18.grid(row=24,column=0,columnspan=3)

                                                    textEntry = StringVar()
                                                    textEntry1 = StringVar()
                                                    textEntry2 = StringVar()
                                                    textEntry3 = StringVar()
                                                    textEntry4 = StringVar()
                                                    textEntry5 = StringVar()
                                                    textEntry6 = StringVar()
                                                    textEntry7 = StringVar()
                                                    textEntry8 = StringVar()
                                                    textEntry9 = StringVar()
                                                    textEntry10 = StringVar()
                                                    textEntry11 = StringVar()
                                                    textEntry12 = StringVar()
                                                    textEntry13 = StringVar()
                                                    textEntry14 = StringVar()
                                                    textEntry15 = StringVar()

                                                    entrya=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry)
                                                    entrya.grid(row=4,column=3,columnspan=3,sticky=E)
                                                    entryb=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry1)
                                                    entryb.grid(row=5,column=3,columnspan=3,sticky=E)
                                                    entry2=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry2)
                                                    entry2.grid(row=6,column=3,columnspan=3,sticky=E)
                                                    entry3=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry3)
                                                    entry3.grid(row=7,column=3,columnspan=3,sticky=E)
                                                    entry4=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry4)
                                                    entry4.grid(row=8,column=3,columnspan=3,sticky=E)
                                                    entry5=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry5)
                                                    entry5.grid(row=9,column=3,columnspan=3,sticky=E)
                                                    entry6=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry6)
                                                    entry6.grid(row=11,column=3,columnspan=3,sticky=E)
                                                    entry7=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry7)
                                                    entry7.grid(row=12,column=3,columnspan=3,sticky=E)
                                                    entry8=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry8)
                                                    entry8.grid(row=14,column=3,columnspan=3,sticky=E)
                                                    entry9=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry9)
                                                    entry9.grid(row=15,column=3,columnspan=3,sticky=E)
                                                    entry10=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry10)
                                                    entry10.grid(row=17,column=3,columnspan=3,sticky=E)
                                                    entry11=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry11)
                                                    entry11.grid(row=18,column=3,columnspan=3,sticky=E)
                                                    entry12=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry12)
                                                    entry12.grid(row=19,column=3,columnspan=3,sticky=E,pady=4)
                                                    entry13=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry13)
                                                    entry13.grid(row=21,column=3,columnspan=3,sticky=E,pady=4)
                                                    entry14=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry14)
                                                    entry14.grid(row=22,column=3,columnspan=3,sticky=E,pady=4)
                                                    entry15=Entry(window1,font = ('calibre',10,'normal'),textvariable=textEntry15)
                                                    entry15.grid(row=24,column=3,columnspan=3,sticky=E,pady=4)

                                                    labe=Label(window1,text='')
                                                    labe.grid(row=25,column=1)

                                                    entrya.insert(0,i[0])
                                                    entryb.insert(0,i[3])
                                                    entry2.insert(0,i[1])
                                                    entry3.insert(0,i[2])
                                                    entry4.insert(0,i[4])
                                                    entry5.insert(0,i[5])
                                                    entry6.insert(0,i[6])
                                                    entry7.insert(0,i[7])
                                                    entry8.insert(0,i[8])
                                                    entry9.insert(0,i[9])
                                                    entry10.insert(0,i[10])
                                                    entry11.insert(0,i[11])
                                                    entry12.insert(0,i[12])
                                                    entry13.insert(0,i[13])
                                                    entry14.insert(0,i[14])
                                                    entry15.insert(0,i[15])

                                                    def update():
                                                            name=str(entrya.get())
                                                            city=str(entry2.get())
                                                            state=str(entry3.get())
                                                            sfield=str(entryb.get())
                                                            qual=str(entry4.get())
                                                            qualy=int(entry5.get())
                                                            u_name=str(entry6.get())
                                                            regdate=str(entry7.get())
                                                            email=str(entry8.get())
                                                            dob=str(entry9.get())
                                                            phnum=int(entry10.get())
                                                            mobnum=int(entry11.get())
                                                            hosdetails=str(entry12.get())
                                                            resdetails=str(entry13.get())
                                                            user=str(entry14.get())
                                                            passw=str(entry15.get())
                                                            try:
                                                                    conn= m.connect(host='localhost',user='root' , password='')
                                                                    c=conn.cursor()
                                                                    c.execute('create database if not exists Doctor_Management')
                                                                    c.execute('use Doctor_Management')
                                                                    c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                                                                    c.execute('''update doctor set doctor_name="%s" where username="%s"'''%(name,entry.get()))
                                                                    c.execute('''update doctor set city="%s" where username="%s" '''%(city,entry.get()))
                                                                    c.execute('''update doctor set state="%s" where username="%s" '''%(state,entry.get()))
                                                                    c.execute('''update doctor set specialist_field="%s" where username="%s" '''%(sfield,entry.get()))
                                                                    c.execute('''update doctor set qualification="%s" where username="%s" '''%(qual,entry.get()))
                                                                    c.execute('''update doctor set qualification_year="%d" where username="%s"'''%(qualy,entry.get()))
                                                                    c.execute('''update doctor set university_name="%s" where username="%s"'''%(u_name,entry.get()))
                                                                    c.execute('''update doctor set reg_date="%s" where username="%s"'''%(regdate,entry.get()))
                                                                    c.execute('''update doctor set email_id="%s" where username="%s" '''%(email,entry.get()))
                                                                    c.execute('''update doctor set date_of_birth="%s" where username="%s" '''%(dob,entry.get()))
                                                                    c.execute('''update doctor set emergency_phone_number="%d" where username="%s"'''%(phnum,entry.get()))
                                                                    c.execute('''update doctor set mobile_number="%d" where username="%s"'''%(mobnum,entry.get()))
                                                                    c.execute('''update doctor set Hopital_details="%s" where username="%s"'''%(hosdetails,entry.get()))
                                                                    c.execute('''update doctor set address="%s" where username="%s"'''%(resdetails,entry.get()))
                                                                    c.execute('''update doctor set username="%s" where username="%s" '''%(user,entry.get()))
                                                                    c.execute('''update doctor set password="%s" where username="%s"'''%(passw,entry.get()))
                                                                    conn.commit()
                                                                    messagebox.showinfo('Update Status','Record updateded successfully')
                                                                    c.close()
                                                                    conn.close()
                                                            except m.Error as error:
                                                                    messagebox.showinfo('Update Status','Record updation failed'+format(error))
                                                    upbut=Button(window1,text='Update',font=('Times',10),command=update)
                                                    upbut.grid(row=26,column=3,padx=2,pady=3)

                            but3=Button(window1,text='Next',font='Times',command=lambda d=d: next(d))
                            but3.grid(row=10,column=3,pady=5)

                buts=Button(window1,text='Okay',font='Times',command=okay)
                buts.grid(row=6,column=3)

        #delete function
        def delete():
                label.destroy()
                labelp.destroy()
                but.destroy()
                but1.destroy()
                but2.destroy()
                labels=Label(window1,text=' ')
                labels.grid(row=0,column=0,columnspan=6,rowspan=2)
                labelss=Label(window1,text='           Enter your name',font=('algerian',15))
                labelss.grid(row=2,column=1,columnspan=6,rowspan=2)

                entrys=Entry(window1,font = ('calibre',10,'normal'))
                entrys.grid(row=4,column=4,columnspan=3,sticky=E)
                def okay():
                        name=entrys.get()
                        conn=m.connect(host='localhost',user='root' , password='')
                        c=conn.cursor()
                        c.execute('create database if not exists Doctor_Management')
                        c.execute('use Doctor_Management')
                        c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                        c.execute('''select * from doctor where Doctor_Name="%s"'''%name)
                        d=c.fetchall()
                        if d==[]:
                            messagebox.showerror('Insert Status','Entered Name not found')
                        else:
                            buts.grid_forget()
                            labels.grid_forget()
                            labelss.grid_forget()
                            entrys.grid_forget()
                            label1=Label(window1,text='')
                            label1.grid(row=0,column=0,columnspan=6,rowspan=2)
                            label2=Label(window1,text='      Enter username/Passord',font=('algerian',15))
                            label2.grid(row=2,column=1,columnspan=6,rowspan=2)

                            label3=Label(window1,text='Username')
                            label3.grid(row=4,column=0,columnspan=6,rowspan=2)
                            label4=Label(window1,text='')
                            label4.grid(row=6,column=1,columnspan=6)
                            label5=Label(window1,text='Password')
                            label5.grid(row=7,column=0,columnspan=6,rowspan=2)
                            label6=Label(window1,text='')
                            label6.grid(row=8,column=1,columnspan=6,rowspan=2)

                            entry=Entry(window1,font = ('calibre',10,'normal'))
                            entry.grid(row=4,column=4,columnspan=3,sticky=E)
                            entry1=Entry(window1,font = ('calibre',10,'normal'), show = '*')
                            entry1.grid(row=7,column=4,columnspan=3,sticky=E)
                            def next(d):
                                    nonlocal c
                                    for i in d:
                                            if entry.get()=='' or entry1.get()=='':
                                                    messagebox.showinfo('Insert Status','Enter Username/Password')
                                            elif  (entry.get()!=i[14] and entry1.get()==i[15]) or (entry.get()==i[14] and entry1.get()!=i[15]) or (entry.get()!=i[14] and entry1.get()!=i[15]):
                                                    entry.delete(0,END)
                                                    entry1.delete(0,END)
                                                    messagebox.showerror('Insert Status','Entered Username/Password is incorrect: Access Denied')
                                            elif entry.get()==i[14] and entry1.get()==i[15]:
                                                    response=messagebox.askyesno('User Account Status','Are you sure you want to delete your corner?')
                                                    if response==1:
                                                            try:
                                                                    conn= m.connect(host='localhost',user='root' , password='')
                                                                    c=conn.cursor()
                                                                    c.execute('create database if not exists Doctor_Management')
                                                                    c.execute('use Doctor_Management')
                                                                    c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                                                                    c.execute('''delete from doctor where username="%s" and password="%s"'''%(entry.get(),entry1.get()))
                                                                    conn.commit()
                                                                    messagebox.showinfo('User Account Status','Record deleted successfully')
                                                                    c.close()
                                                                    entry.delete(0,END)
                                                                    entry1.delete(0,END)
                                                                    conn.close()
                                                            except m.Error as error:
                                                                    messagebox.showinfo('User Account Status','Record deletion failed'+format(error))
                                                                    entry.delete(0,END)
                                                                    entry1.delete(0,END)
                            but3=Button(window1,text='Next',font='Times',command=lambda d=d: next(d))
                            but3.grid(row=10,column=3,pady=5)
                buts=Button(window1,text='Okay',font='Times',command=okay)
                buts.grid(row=6,column=3)

        '''-------buttons-----------'''
        but=Button(window1,text='Create a corner',font=('Times',18),command=create,height=3)
        but.place(x=70,y=150)
        but1=Button(window1,text='Update your corner',font=('Times',18),command=update,height=3)
        but1.place(x=260,y=150)
        but2=Button(window1,text='Delete your corner',font=('Times',18),command=delete,height=3)
        but2.place(x=170,y=270)

doc_but=Button(window,text='Doctor?',height=2,width=8,font='calibre',fg='#0c5786',bg='#ffffff',command=doc).place(x=1000,y=0)

'''data for the searching part'''
options_state=['Ahmedabad', 'Surat', 'Vadodara', 'Rajkot', 'Bhavnagar', 'Jamnagar', 'Junagadh', 'Anand', 'Navsari', 'Morbi', 'Gandhinagar', 'Gandhidham', 'Nadiad', 'Surenderanagar','Bharuch',' Daman', 'Porbandar','Ahmadnagar','Akola','Amravati','Aurangabad','Bhandara','Bhusawal','Bid','Buldana','Chandrapur','Daulatabad','Dhule','Jalgaon','Kalyan','Karli',
               'Kolhapur','Mahabaleshwar','Malegaon','Matheran','Mumbai','Nagpur','Nanded','Nashik','Osmanabad','Pandharpur','Parbhani','Pune','Ratnagiri','Sangli','Satara','Sevagram','Solapur','Thane','Ulhasnagar','Vasai-Virar','Wardha','Yavatmal','Badami','Ballari','Bangalore','Belgavi','Bhadravati','Bidar','Chikkamagaluru','Chitradurga','Davangere','Halebid',
               'Hassan','HubballiDharwad','Kalaburagi','Kolar','Madikeri','Mandya','Mangaluru','Mysuru','Raichur','Shivamogga','Shravanabelagola','Shrirangapattana','Tumkuru','Alappuzha','Badagara','Idukki','Kannur','Kochi','Kollam','Kottayam','Kozhikode','Mattancheri','Palakkad','Thalassery','Thiruvananthapuram','Thrissur','Arcot','Chengalpattu','Chennai',
               'Chidambaram','Coimbatore','Cuddalore','Dharmapuri','Dindigul','Erode','Kanchipuram','Kanniyakumari','Kodaikanal','Kumbakonam','Madurai','Mamallapuram','Nagappattinam','Nagercoil','Palayankottai','Pudukkottai','Rajapalaiyam','Ramanathapuram','Salem','Thanjavur','Tiruchchirappalli','Tirunelveli','Tiruppur','Tuticorin','Udhagamandalam','Vellore',
               'Adoni','Amaravati','Anantapur','Chandragiri','Chittoor','Dowlaiswaram','Eluru','Guntur','Kadapa','Kakinada','Kurnool','Machilipatnam','Nagarjunakoṇḍa','Rajahmundry','Srikakulam','Tirupati','Vijayawada','Visakhapatnam','Vizianagaram','Yemmiganur','Hyderabad','Karimnagar','Khammam','Mahbubnagar','Nizamabad','Sangareddi','Warangal','Ambikapur',
               'Bhilai','Bilaspur','Dhamtari','Durg','Jagdalpur','Raipur','Rajnandgaon','Balangir','Baleshwar','Baripada','Bhubaneshwar','Brahmapur','Cuttack','Dhenkanal','Keonjhar','Konark','Koraput','Paradip','Phulabani','Puri','Sambalpur','Udayagiri','Bokaro','Chaibasa','Deoghar','Dhanbad','Dumka','Giridih','Hazaribag','Jamshedpur','Jharia','Rajmahal','Ranchi',
               'Saraikela','Alipore','AlipurDuar','Asansol','Baharampur','Bally','Balurghat','Bankura','Baranagar','Barasat','Barrackpore','Basirhat','Bhatpara','Bishnupur','Budge Budge','Burdwan','Chandernagore','Darjiling','Diamond Harbour','DumDum','Durgapur','Halisahar','Haora','Hugli','Ingraj Bazar','Jalpaiguri','Kalimpong','Kamarhati','Kanchrapara','Kharagpur',
               'Koch Bihar','Kolkata','Krishnanagar','Malda','Midnapore','Murshidabad','Navadwip','Palashi','Panihati','Purulia','Raiganj','Santipur','Shantiniketan','Shrirampur','Siliguri','Siuri','Tamluk','Titagarh','Aizawl','Lunglei','Kohima','Mon','Phek','Wokha','Zunheboto',
               'Leh','Kargil','Hanle','Hemis','Lamayuru','Turtuk','Chumathang','Alchi','Basgo','upsi','Shimla','Manali','Dharmashala','Dalohousie','Kasauli','Mandi','Kasol','Palampur','Chamba','Salon','Amritsar','Ludhiana','Jalandhar','Patiala','Bandhinda','Chandigarh','Sahibzada','Pathankot','Kapurthala','Anandpur','Sahib','Gurugram','Faridabad','Rohtak','Panchukula',
               'Karnal','Hisar','Ambala','Panipat','Sonipat','Dehradun','Haldwani-cum-Kathgodam','Haridwar','Roorkee','Rudrapur','Kashipur','Rishikesh','Ranikhet','Patnanagar','Pauri','Purola','Jaipur','Jaisalmer','Udaipur','Jodhpur','Bikaner','Pushkar','Ajmer','Sikar','Alwar','Mount Abu','Bordumsa','Deomali','Hawai','Itanagar','Jairampur','Nyapin','Tawang','Bomdila',
               'Khonsa','Yupia','Bhopal','Guna','Jabalpur','Gwalior','Indore','Jhansi','Morena','Ujjain','Sagar','Dewas','Agra','Lucknow','Kanpur','Dabra','Noida','Meerut','Mathura','Firozabad','Ayodhya','Balliya','Patna','Gaya','Hajipur','Kaithar','Chapra','Buxar','Madhubani','Bodhgaya','Sitamarhi','Dehri','Guwahati','Jorhat','Tezpur','Sivasagar','Hojai','Rangai','Dhubri',
               'Dispur','Silchar','Nagaon','Tura','Shillong','Cherrapunji','Jowal','Nongstoin','Nongpoh','Guwahati','Mairang','Mawlynnong','Resubelpara','Bishnupur','Chandel','Churachandpur','Imphal East','Imphal West','Senapati','Tamenglong','Thoubal','Ukhrul','Andro','Kumbi','Kwakta','Heirok','Jiribom','Sidhi','Nagda','Shajapur','Dindori','Ashoknagar','Sanchi','Chitrakoot',
               'Sheopur','Prayagraj','Varanasi','Bareilly','Aligarh','Moradabad','Hapur','Rampur','Basti','Azamgarh','Etawah','Janupur','Gonda','Mau','Kota','Achhabal','Baramula','Doda','Jammu','Kulgam','Punch','Ramban','Sambi','Srinagar','Udhampur','Samba','Kathua','Badgam','Andhra Pradesh', 'Arunachal Pradesh','Assam,Bihar','Chhattisgarh','Goa','Gujarat',
               'Haryana','Himachal Pradesh','Jharkhand','Karnataka','Kerala','Madhya Pradesh','Maharashtra','Manipur','Meghalaya','Mizoram','Nagaland','Odisha','Punjab','Rajasthan','Sikkim','Tamil Nadu','Telangana','Tripura','Uttarakhand','Uttar Pradesh','West Bengal']

               
options_field=['Acupuncture', 'Addiction Medicine', 'Addiction Psychiatry', 'Addiction and Substance Abuse Counseling', 'Advanced Heart Failure and Transplant Cardiology', 'Aerospace Medicine', 'Allergy and Immunology', 'Alternative Care', 'Anatomic and Clinical Pathology', 'Anatomic Pathology', 'Anesthesiology', 'Anesthesiology (Anesthesiology Assistant)',
               'Art Therapy', 'Assisted Living', 'Assistive Therapy', 'Athletic Training', 'Attendant Care', 'Audiology', 'Audiology (Audiology Assistant)', 'Bariatric Medicine', 'Bariatric Surgery', 'Behavior Analysis', 'Blood Banking and Transfusion Medicin', 'Brain Injury Medicine', 'Cardiology', 'Cardiothoracic Surgery', 'Cardiovascular Technology',
               'Chemical Pathology', 'Child and Adolescent Psychiatry', 'Child Abuse Pediatrics', 'Chiropractic', 'Clinical Cardiac Electrophysiology', 'Clinical Exercise Physiology', 'Clinical Informatics', 'Clinical Lipidology', 'Clinical Neurophysiology', 'Clinical Pathology', 'Clinical Pharmacology', 'Clinical Psychology', 'Colorectal Surgery', 'Community Health Work',
               'Congenital Cardiac Surgery', 'Cosmetic, Plastic and Reconstructive Surgery', 'Counseling', 'Critical Care Medicine', 'Critical Care Surgery', 'Cytopathology', 'Dance Therapy', 'Darkroom Technology', 'Dental Hygiene', 'Dentistry', 'Dermatology', 'Dermatopathology', 'Developmental Therapy', 'Developmental-Behavioral Pediatrics', 'Diagnostic Laboratory and Dermatologic Immunology',
               'Diagnostic Radiology', 'Diagnostic Ultrasound Imaging', 'Dietetics', 'Ear, Nose, and Throat (ENT)', 'Electrodiagnostic Medicine',' Emergency Medical Technology (EMT)', 'Emergency Medicine', 'Endocrinology', 'Diabetes and Metabolism',' Endodontics', 'Family Medicine',' Female Pelvic Medicine and Reconstructive Surgery', 'Forensic Pathology', 'Forensic Psychiatry',
               'Gastroenterology', 'General Dentistry (Dental Assistant)', 'General Surgery', 'Genetic Counseling', 'Genetics', 'Geriatric Medicine', 'Health Education', 'Healthcare Coordination', 'Hearing and Speech Therapy', 'Hearing Instruments', 'Hematology', 'Hematopathology', 'Hepatology','Holistic Medicine',' Home Health (Aide)', 'Homeopathy', 'Hospice and Palliative Medicine',
               'Hospital Medicine',' Immunopathology', 'Inectious Disease Medicine', 'Internal Medicine', 'Interventional Cardiology', 'Labor Coaching (Doula)', 'Laboratory Management Technology', 'Laboratory Medicine', 'Lactation Consulting', 'Legal Medicine', 'Marriage and Family Therapy', 'Massage Therapy', 'Mastectomy Fitting', 'Maternal-Fetal Medicine', 'Mechanotherapy',
               'Medical Editing', 'Medical Ethics', 'Medical Examiner', 'Medical Informatics', 'Medical Microbiology', 'Medical Physics', 'Medical Technology', 'Medical Toxicology', 'Mental Health', 'Midwifery', 'Molecular Genetic Pathology', 'Music Therapy', 'Naprapathy', 'Naturopathy', 'Neonatal Medicine', 'Nephrology', 'Neurodevelopmental Disabilities', 'Neurogenetics',
               'Neurology', 'Neuromusculoskeletal Medicine', 'Neuropathology', 'Neuropsychology', 'Neuroradiology', 'Neurosurgery', 'Nuclear Medicine', 'Nuclear Radiology', 'Nurse Anesthesiology', 'Nursing (Clinical Nurse Specialist)', 'Nursing (Nurse Practitioner)', 'Nursing (Registered Nurse)', 'Nursing Services', 'Obstetrics and Gynecology', 'Occupational and Physical Therapy',
               'Occupational Medicine', 'Occupational Therapy', 'Occupational Therapy (Occupational Therapy Assistant)', 'Ocularistry', 'Oncology', 'Ophthalmic Technology','Ophthalmology', 'Ophthamology (Ophthalmic Assistant)', 'Optometry', 'Optometry (Optometry Assistant)', 'Optometry Technology', 'Oral and Maxillofacial Pathology', 'Oral and Maxillofacial Radiology',
               'Oral and Maxillofacial Surgery', 'Orthopedic Hand Surgery', 'Orthopedic Spine Surgery', 'Orthopedic Surgery', 'Orthoptics', 'Orthotic Fitting', 'Orthodontics', 'Pain Medicine', 'Pathology Technology', 'Pediatric Allergy and Immunology', 'Pediatric Anesthesiology', 'Pediatric Cardiology', 'Pediatric Cardiothoracic Surgery', 'Pediatric Chiropractic',
               'Pediatric Critical Care Medicine', 'Pediatric Dentistry', 'Pediatric Dermatology', 'Pediatric Diagnostic Laboratory Immunology', 'Pediatric Dietetics', 'Pediatric Emergency Medicine', 'Pediatric Endocrinology', 'Pediatric Gastroenterology', 'Pediatric Hematology and Oncology', 'Pediatric Hospice and Palliative Medicine',
               'Pediatric Infectious Disease Medicine', 'Pediatric Medical Genetics', 'Pediatric Medical Toxicology', 'Pediatric Medicine', 'Pediatric Nephrology', 'Pediatric Neurodevelopmental Disabilities', 'Pediatric Neurology', 'Pediatric Neurosurgery', 'Pediatric Nursing', 'Pediatric Occupational Therapy', 'Pediatric Optometry',
               'Pediatric Orthopedic Surgery', 'Pediatric Otolaryngology (Ear, Nose and Throat)', 'Pediatric Pathology', 'Pediatric Physical Therapy', 'Pediatric Plastic Surgery', 'Pediatric Pulmonology', 'Pediatric Radiology', 'Pediatric Rheumatology', 'Pediatric Sleep Medicine', 'Pediatric Sports Medicine', 'Pediatric Surgery',
               'Pediatric Transplant Hepatology', 'Pediatric Urology', 'Pediatrics', 'Pediatrics Physical Medicine and Rehabilitation', 'Periodontics', 'Personal Care Attendance', 'Personal Emergency Response Attendance', 'Pharmaceutical Medicine', 'Pharmacology', 'Pharmacotherapy', 'Pharmacy', 'Pharmacy Clinician Services',
               'Phlebology', 'Physical Medicine and Rehabilitation', 'Physical Therapy', 'Physical Therapy (Physical Therapy Assistant)', 'Physician Assistant (PA)','Podiatric Surgery', 'Podiatry', 'Podiatry (Podiatry Assistant)', 'Poetry Therapy', 'Practical Nursing (Licensed Practical Nurse)', 'Preventive Medicine',
               'Prosthetics', 'Prosthetics and Orthotics', 'Psychiatry', 'Psychosomatic Medicine', 'Psychotherapy', 'Public Health and General Preventive Medicine', 'Pulmonary Disease', 'Pulmonary Function Technology', 'Radiation Oncology', 'Radioisotopic Pathology', 'Radiologic Technology', 'Radiology',
               'Radiology (Practitioner Assistant)',' Recreation Therapy', 'Reflexology', 'Reproductive Endocrinology and Infertility', 'Research', 'Respiratory Therapy', 'Rheumatology', 'Rural Medicine', 'Sleep Medicine', 'Social Work', 'Spa Medicine', 'Speech-Language Pathology', 'Spinal Cord Injury Medicine', 'Sports Medicine', 'Surgical (Selective) Pathology',
               'Surgical Assistance', 'Transplant Hepatology', 'Transplant Surgery', 'Undersea and Hyperbaric Medicine', 'Urgent Care Medicine', 'Urology', 'Vascular and Interventional Radiology', 'Vascular Medicine', 'Vascular Neurology', 'Vascular Surgery']
'''----------------------------------'''

#for searching using field button
def field_but():
        exit(window)
        window1=Tk()
        window1.geometry("580x600")
        window1.title('HOSPITAL MANAGEMENT SYSTEM')
        label1=Label(window1,text='the good physician'+'\n'+'treats the disease; the great physician'+'\n'+'treats the patient'+'\n'+'who has the disease',fg='grey1',bg='grey90',font=('algerian',20,'italic'))
        label1.pack()
        label2=Label(window1,text='    ')
        label2.pack()
        mycombo=ttk.Combobox(window1,value=options_field,font='Times')
        mycombo.current(0)
        mycombo.bind("<<ComboboxSelected>>")
        mycombo.pack(fill=X)
        label3=Label(window1,text='    ')
        label3.pack()
        def clicked():
                mycombo.pack_forget()
                but.pack_forget()
                label1.pack_forget()
                label2.pack_forget()
                label3.pack_forget()
                conn= m.connect(host='localhost',user='root' , password='')
                c=conn.cursor()
                c.execute('create database if not exists Doctor_Management')
                c.execute('use Doctor_Management')
                c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                c.execute('''select * from doctor where Specialist_field="%s" '''%mycombo.get())
                d=c.fetchall()
                mainlabel=Label(window1,text="Number of Doctor's available : "+str(c.rowcount),height=2)
                mainlabel.pack()
                def view(i):
                                window2=Tk()
                                window2.geometry("500x530")
                                window2.title('HOSPITAL MANAGEMENT SYSTEM')
                                label0=Label(window2,text='')
                                label0.grid(row=0,column=0,rowspan=2)
                                label1=Label(window2,text='Name : '+ i[0],font='Times')
                                label1.grid(row=2,column=0,columnspan=2,sticky=W)
                                label2=Label(window2,text='City : '+ i[1],font='Times')
                                label2.grid(row=3,column=0,columnspan=2,sticky=W)
                                label3=Label(window2,text='State : '+ i[2],font='Times')
                                label3.grid(row=4,column=0,columnspan=2,sticky=W)
                                label4=Label(window2,text='Specialist field : '+ i[3],font='Times')
                                label4.grid(row=5,column=0,columnspan=2,sticky=W)
                                label5=Label(window2,text='PH. Number : '+str(i[11]),font='Times')
                                label5.grid(row=6,column=0,columnspan=2,sticky=W)
                                frame=LabelFrame(window2,text='QUALIFICATION',font='algerian')
                                frame.grid(row=7,column=0,columnspan=4,rowspan=6)
                                frame1=LabelFrame(window2,text='HOSPITAL DETAILS',font='algerian')
                                frame1.grid(row=13,column=0,columnspan=4,rowspan=6)
                                label6=Label(frame,text=str(i[4])+'\n'+ str(i[5]),font='Times').pack()
                                label7=Label(frame1,text=i[12],font='Times').pack()
                for i in d:
                        framei=LabelFrame(window1)
                        framei.pack(fill=X)
                        label=Label(framei,text='Name : '+ i[0],font='algerian')
                        label.pack()
                        label=Label(framei,text='City : '+ i[1],font='algerian')
                        label.pack()
                        label=Label(framei,text='State : '+ i[2],font='algerian')
                        label.pack()
                        label=Label(framei,text='Specialist field : '+ i[3],font='algerian')
                        label.pack()
                        label=Label(framei,text='PH. Number : '+str(i[11]),font='algerian')
                        label.pack()
                        
                        buti=Button(framei,text='View Profile',command= lambda i=i: view(i)).pack()
                conn.close()
        but=Button(window1,text='Search',font='calibre',command=clicked)
        but.pack()
        
#for searching using state button
def state_but():
        exit(window)
        window1=Tk()
        window1.geometry("500x530")
        window1.title('HOSPITAL MANAGEMENT SYSTEM')
        label1=Label(window1,text='the good physician'+'\n'+'treats the disease; the great physician'+'\n'+'traets the patient'+'\n'+'who has the disease',fg='grey1',bg='grey90',font=('algerian',20,'italic'))
        label1.pack()
        mycombo=ttk.Combobox(window1,value=options_state)
        mycombo.current(0)
        mycombo.bind("<<ComboboxSelected>>")
        mycombo.pack()
        def clicked():
                mycombo.pack_forget()
                but.pack_forget()
                label1.pack_forget()
                conn= m.connect(host='localhost',user='root' , password='')
                c=conn.cursor()
                c.execute('create database if not exists Doctor_Management')
                c.execute('use Doctor_Management')
                c.execute("create table if not exists doctor(Doctor_Name varchar(50) not null,City varchar(50) not null,State varchar(50) not null,Specialist_field varchar(100) not null,Qualification varchar(1000) not null,Qualification_Year integer not null,University_name varchar(500) not null,REG_Date date not null,Email_ID varchar(50) not null,Date_of_Birth date not null,Emergency_Phone_number integer not null,Mobile_number integer not null,Hopital_details varchar(1000) not null,Address varchar(1000) not null,Username varchar(50) not null,Password varchar(100) not null,Primary key(Username,Password))")
                c.execute('''select * from doctor where City="%s" or State="%s" '''%(mycombo.get(),mycombo.get()))
                d=c.fetchall()
                mainlabel=Label(window1,text="Number of Doctor's available : "+str(c.rowcount),height=2)
                mainlabel.pack()
                for i in d:
                        framei=LabelFrame(window1)
                        framei.pack(fill=X)
                        label=Label(framei,text='Name : '+ i[0],font='algerian')
                        label.pack()
                        label=Label(framei,text='City : '+ i[1],font='algerian')
                        label.pack()
                        label=Label(framei,text='State : '+ i[2],font='algerian')
                        label.pack()
                        label=Label(framei,text='Specialist field : '+ i[3],font='algerian')
                        label.pack()
                        label=Label(framei,text='PH. Number : '+str(i[11]),font='algerian')
                        label.pack()
                        def view(i):
                                window2=Tk()
                                window2.geometry("500x530")
                                window2.title('HOSPITAL MANAGEMENT SYSTEM')
                                label0=Label(window2,text='')
                                label0.grid(row=0,column=0,rowspan=2)
                                label1=Label(window2,text='Name : '+ i[0],font='Times')
                                label1.grid(row=2,column=0,columnspan=2,sticky=W)
                                label2=Label(window2,text='City : '+ i[1],font='Times')
                                label2.grid(row=3,column=0,columnspan=2,sticky=W)
                                label3=Label(window2,text='State : '+ i[2],font='Times')
                                label3.grid(row=4,column=0,columnspan=2,sticky=W)
                                label4=Label(window2,text='Specialist field : '+ i[3],font='Times')
                                label4.grid(row=5,column=0,columnspan=2,sticky=W)
                                label5=Label(window2,text='PH. Number : '+str(i[11]),font='Times')
                                label5.grid(row=6,column=0,columnspan=2,sticky=W)
                                frame=LabelFrame(window2,text='QUALIFICATION',font='algerian')
                                frame.grid(row=7,column=0,columnspan=4,rowspan=6)
                                frame1=LabelFrame(window2,text='HOSPITAL DETAILS',font='algerian')
                                frame1.grid(row=13,column=0,columnspan=4,rowspan=6)
                                label6=Label(frame,text=str(i[4])+'\n'+ str(i[5]),font='Times').pack()
                                label7=Label(frame1,text=i[12],font='Times').pack()
                        
                        buti=Button(framei,text='View Profile',command= lambda i=i: view(i)).pack()
                conn.close()
        but=Button(window1,text='Search',font='calibre',command=clicked)
        but.pack()

search_field=Button(window,text='Search by Speciality',height=3,font='calibre',fg='#ffffff',bg='#0d5787').place(x=350,y=500)
search_state=Button(window,text='Search by City/State',height=3,font='calibre',fg='#ffffff',bg='#0d5787',command=state_but).place(x=650,y=500)

window.mainloop()
